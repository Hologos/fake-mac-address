#! /usr/bin/env bash

set -euo pipefail

# -- global variables ---------------------------------------------------------

FMA_OS_LINUX="linux"
FMA_OS_MACOS="macos"
FMA_OS_UNDEF="undef"

FMA_OS="${FMA_OS_UNDEF}"
FMA_OS=""

# -- os detection -------------------------------------------------------------

current_os="$(uname)"

# checks if this is supported OS
case "${current_os}" in
    Linux)
        FMA_OS="${FMA_OS_LINUX}"
    ;;

    Darwin)
        FMA_OS="${FMA_OS_MACOS}"
    ;;

    *)
        >&2 echo
        >&2 echo "${current_os} is not supported operating system."
        exit 1
esac

# -- absolute dirpath ---------------------------------------------------------

ABSOLUTE_DIRPATH="$( cd "$( dirname "$( [[ -L "${BASH_SOURCE[0]}" ]] && readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}" )" )" && pwd )" || { \
    >&2 echo
    >&2 echo "Cannot determine real path of the script."
    exit 1
}

# -- load libraries -----------------------------------------------------------

# shellcheck source=vendor/fidian/ansi/ansi
. "${ABSOLUTE_DIRPATH}/vendor/fidian/ansi/ansi"

# shellcheck source=libs/utils
. "${ABSOLUTE_DIRPATH}/libs/utils"

# shellcheck source=libs/inputparser
. "${ABSOLUTE_DIRPATH}/libs/inputparser"

# shellcheck source=libs/network
. "${ABSOLUTE_DIRPATH}/libs/network"

# shellcheck source=libs/flow
. "${ABSOLUTE_DIRPATH}/libs/flow"

case "${FMA_OS}" in
    "${FMA_OS_LINUX}")
        # shellcheck source=libs/network.linux
        . "${ABSOLUTE_DIRPATH}/libs/network.linux"

        # shellcheck source=libs/flow.linux
        . "${ABSOLUTE_DIRPATH}/libs/flow.linux"
    ;;

    "${FMA_OS_MACOS}")
        # shellcheck source=libs/network.macos
        . "${ABSOLUTE_DIRPATH}/libs/network.macos"

        # shellcheck source=libs/flow.macos
        . "${ABSOLUTE_DIRPATH}/libs/flow.macos"
    ;;
esac

# -- initial setup ------------------------------------------------------------

fma::inputparser::parse_input "${@}"

if [[ -z "${FMA_CONFIG_FILEPATH+_}" ]]; then
    fma::utils::usage
    fma::utils::terminate "Environment variable FMA_CONFIG_FILEPATH is not set and filepath was not passed via an argument."
fi

if [[ ! -e "${FMA_CONFIG_FILEPATH}" ]]; then
    fma::utils::terminate "Configuration file [${FMA_CONFIG_FILEPATH}] doesn't exist."
elif [[ ! -r "${FMA_CONFIG_FILEPATH}" ]]; then
    fma::utils::terminate "Can't read configuration file [${FMA_CONFIG_FILEPATH}]."
fi

fma::utils::load_configuration

if [[ -z "${FMA_AFFECTED_INTERFACE+_}" ]]; then
    fma::utils::usage
    fma::utils::terminate "Affected interface is not set in configuration nor was passed via an argument."
elif [[ -z "${FMA_FAKE_MAC_ADDRESS+_}" ]]; then
    fma::utils::usage
    fma::utils::terminate "Fake mac address is not set in configuration nor was passed via an argument."
fi

# -- main program -------------------------------------------------------------

fma::flow::preflight_checks

fma::flow::fake_mac_address
